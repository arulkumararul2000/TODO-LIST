
import React from "react";
import "./ListItems.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import FlipMove from "react-flip-move";

function ListItems(props) {
  const items = props.items;
  const listItems = items.map((item) => {
    return (
      <div className="list" key={item.key}>
        <p>
          <input type="text" 
          id={item.key}
          value={item.text}
          onChange={
            (e) => {
              props.setUpdate(e.target.value, item.key)
            }
          }
           />
          <span>
            <FontAwesomeIcon
              className="faicons"
              onClick={() => {
                props.deleteItem(item.key);
              }}
              icon="trash"
            />
          </span>
        </p>
      </div>
    );
  });
  return <div className="list-todo"><FlipMove duration={300} easing='ease-in-out'>{listItems}</FlipMove></div>;
}

export default ListItems;





import "./App.css";

import React from "react";
import ListItems from "./ListItems.js";
import { library } from "@fortawesome/fontawesome-svg-core";
import { faTrash } from "@fortawesome/free-solid-svg-icons";

library.add(faTrash);

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      items: [],
      currentItem: {
        text: "",
        key: "",
      },
    };
    this.handleInput = this.handleInput.bind(this);
    this.addItem = this.addItem.bind(this);
    this.deleteItem = this.deleteItem.bind(this);
    this.setUpdate = this.setUpdate.bind(this);

  }
  handleInput(e) {
    this.setState({
      currentItem: {
        text: e.target.value,
        key: Date.now(),
      },
    });
  }
  addItem(e) {
    e.preventDefault();
    const newItem = this.state.currentItem;
    if (newItem.text !== "") {
      const newItems = [...this.state.items, newItem];
      this.setState({
        items: newItems,
        currentItems: {
          text: "",
          key: "",
        },
      });
    }
  }

  deleteItem(key) {
    const filterItems = this.state.items.filter(item => item.key !== key);
    this.setState({
      items: filterItems
    })
  }
  setUpdate(text, key){
    const items = this.state.items;
    items.map(item=>{
      if(item.key===key){
        item.text=text;
      }
    })
    this.setState({
      items: items
    })
  }
  render() {
    return (
      <div className="App">
        <header>
          <form id="to-do-form" onSubmit={this.addItem}>
            <input
              type="text"
              placeholder="Enter the task"
              value={this.state.currentItem.text}
              onChange={this.handleInput}
            />
            <button type="submit">Add</button>
          </form>
        </header>
        <ListItems
          items={this.state.items}
          deleteItem={this.deleteItem}
          setUpdate={this.setUpdate}
        />
      </div>
    );
  }
}

export default App;






.list{
    color:#fff;
    width: 300px;
    background-color: #bf07ac;
    height: 50px;
    margin: 20px auto;
    border-radius: 8px;
}
.list p{
    padding: 10px;
    position:relative;
}
.list p span{
    position:absolute;
    right: 10px;
    cursor: pointer;
}
.faicons{
    margin: 0 5px;
    font-size: 15px;

}






